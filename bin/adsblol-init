#!/bin/bash
set -ex
# This script should be setup on a Debian-like system
# This script is idempotent.
# It can be run multiple times without causing any issues.

# Check if we are debian
if [ ! -f /etc/debian_version ]; then
    echo "This script is only for Debian-like systems"
    exit 1
fi

# Check if running as root
if [ ! $(id -u) = 0 ]; then
    echo "This script should be run as root. It will not work if not run as root"
    exit 1
fi

REQS="git jq bridge-utils rtl-sdr iptables wget"
# Check if we have REQ, if not, install them
for REQ in $REQS; do
    if ! dpkg -s $REQ >/dev/null 2>&1; then
        echo "[debug] installing $REQ"
        apt-get install -y $REQ --no-install-recommends
    else
        echo "[debug] $REQ already installed"
    fi
done

# Check if a reboot is pending due to kernel updates
if [ -f /var/run/reboot-required || -f /run/reboot-required ]; then
    echo "A reboot is required. Please reboot and run this script again"
    exit 1
fi

# If /opt/adsblol does not exist, we create it
if [ ! -d /opt/adsblol ]; then
    echo "[debug] creating /opt/adsblol"
    git clone https://github.com/adsblol/feed /opt/adsblol
else
    cd /opt/adsblol
    git fetch --all
    git pull
fi

# Add ourselves to /usr/local/bin
FILES=$(ls /opt/adsblol/bin)
for file in $FILES; do
    # Check if the file exists, or the file exists but is not pointing to the right file
    if [ ! -f /usr/local/bin/$file ] || [ ! $(readlink -f /usr/local/bin/$file) = "/opt/adsblol/bin/$file" ]; then
        rm -f /usr/local/bin/$file
        ln -sf /opt/adsblol/bin/$file /usr/local/bin/$file
    fi

done

# SDR
curl -sL -o /etc/udev/rules.d/rtl-sdr.rules https://raw.githubusercontent.com/wiedehopf/adsb-scripts/master/osmocom-rtl-sdr.rules
BLOCKED_MODULES="rtl2832 dvb_usb_rtl28xxu rtl2832_sdr rtl8xxxu rtl2838"
for module in BLOCKED_MODULES; do
    if grep -q $module /etc/modprobe.d/blacklist.conf; then
        echo "[debug] $module already blacklisted"
    else
        echo "blacklist $module" >>/etc/modprobe.d/blacklist.conf
        rmmod $module || true
        echo "[debug] $module blacklisted"
    fi
done

# Install crun
if [ ! -z $(which /usr/bin/crun) ]; then
    echo "crun already installed"
else
    echo "[debug] installing crun"
    ARCH=$(uname -m | sed 's/arm7l/armhf/' | sed 's/armv7l/armhf/' | sed 's/aarch64/arm64/' | sed 's/x86_64/amd64/')
    if [ "$ARCH" = "armhf" ]; then
        wget "https://raw.githubusercontent.com/katlol/arm32/main/bin/crun" -O /usr/bin/crun
    else
        wget "https://github.com/containers/crun/releases/download/1.8/crun-1.8-linux-${ARCH}" -O /usr/bin/crun
    fi
    chmod +x /usr/bin/crun
fi

# Install docker
# If it is already installed, we do nothing
if [ ! -z $(which /usr/bin/docker) ]; then
    echo "docker already installed. Skipping"
else
    echo "[debug] installing docker"
    TMPDIR=$(mktemp -d)
    ARCH=$(uname -m | sed 's/arm7l/armhf/' | sed 's/armv7l/armhf/' | sed 's/arm64/aarch64/')
    URL="https://download.docker.com/linux/static/stable/$ARCH/docker-23.0.0.tgz"
    wget $URL -O - | tar xvz -C $TMPDIR
    mv $TMPDIR/docker/* /usr/bin
    rm -rf $TMPDIR
    # Add docker group
    groupadd docker || true
    usermod -aG docker $USER

    # Create default docker config
    mkdir -p /etc/docker
    cat <<EOF >/etc/docker/daemon.json
{
    "default-runtime": "crun",
    "runtimes": {
        "crun": {
            "path": "/usr/bin/crun"
        }
    },
    "log-driver": "json-file",
    "log-opts": {
        "max-size": "10m",
        "max-file": "3"
    },
    "storage-driver": "overlay2"
}
EOF

    # get containerd service
    wget https://raw.githubusercontent.com/containerd/containerd/master/containerd.service -O /etc/systemd/system/containerd.service
    # Replace /usr/local/bin/containerd with /usr/bin/containerd
    sed -i 's|/usr/local/bin/containerd|/usr/bin/containerd|g' /etc/systemd/system/containerd.service
    systemctl daemon-reload
    systemctl enable containerd
    systemctl start containerd
    # get dockerd service
    wget https://raw.githubusercontent.com/moby/moby/master/contrib/init/systemd/docker.service -O /etc/systemd/system/docker.service
    wget https://raw.githubusercontent.com/moby/moby/master/contrib/init/systemd/docker.socket -O /etc/systemd/system/docker.socket
    systemctl daemon-reload
    systemctl enable docker
    systemctl start docker
fi
# Install docker-compose
if [ ! -z $(which /usr/local/bin/docker-compose) ]; then
    echo "docker-compose already installed. Skipping"
else
    echo "[debug] installing docker-compose"
    ARCH=$(uname -m | sed 's/arm7l/armv7/' | sed 's/armv7l/armv7/' | sed 's/arm64/aarch64/')
    URL="https://github.com/docker/compose/releases/download/v2.15.1/docker-compose-linux-$ARCH"
    wget $URL -O /usr/local/bin/docker-compose
    chmod +x /usr/local/bin/docker-compose
fi

#mkdirs
mkdir -p /opt/adsblol/data/readsb/collectd \
    /opt/adsblol/data/readsb/autogain \
    /opt/adsblol/data/dump978/autogain \
    /opt/adsblol/data/tar1090/globe_history \
    /opt/adsblol/data/tar1090/timelapse1090 \
    /opt/adsblol/data/planefence/config \
    /opt/adsblol/data/planefence/html \
    /opt/adsblol/data/rtlsdr-airband \
    /opt/adsblol/data/acarshub \
    /opt/adsblol/data/webproxy \
    /opt/adsblol/data/vnstat \
    /opt/adsblol/data/code-server

chmod +x /usr/bin/containerd || true
systemctl enable --now containerd || true
systemctl enable --now docker || true
